---------
Workflow (from copy-num-est root directory)
---------

Note: <HOME> indicates project home, e.g. /projects/btl/yflim/copy-num-est

1. Can be done just once per strain/whatever (defined as association with one reference genome)

cd to species data folder, e.g.:
$ cd data/celegans

Create folder for strain, e.g.:
$ mkdir N2
$ cd N2

Create folder for reference, e.g.:
$ mkdir reference
...
Index for BWA:
$ bwa index reference/celegans.N2.genome.fa

Create folder for datasets, e.g.:
$ mkdir datasets
...

Create folder(s) for simulations, e.g.:
$ mkdir simulations
$ cd simulations
$ mkdir 50x
$ cd 50x
$ mkdir diploid
$ cd diploid
$ dwgsim -e 0.001-0.015 -E 0.002-0.03 -d 150 -C 50 -1 150 -2 150 -n 100 ../../../reference_genomes/celegans.N2.genome.fa diploid.fastq
$ cd ..
$ mkdir haploid
$ cd haploid
$ dwgsim -e 0.001-0.015 -E 0.002-0.03 -d 150 -C 50 -1 150 -2 150 -n 100 -H ../../../reference_genomes/celegans.N2.genome.fa diploid.fastq
$ cd ..

Write mutated reference from simulation:
$ python <HOME>/scripts/utils/simulations/write_mutated_reference.py ../../../reference_genomes/N2/celegans.N2.genome.fa diploid/diploid.fastq.mutations.txt
Index for BWA:
bwa index diploid/diploid.fastq.mutations.txt


2. Can be done just once per dataset (including each set of simulated reads). (Starting from species folder, data/celegans.)

Create folder for dataset, e.g.:
$ mkdir datasets/DRR008444/

$ cd datasets/DRR008444/

Copy dataset read files into folder, e.g.:
$ cp <read1_filepath> .

$ mkdir k80
$ cd k80

Assemble reads, e.g.:
$ <HOME>/scripts/run-abyss.sh <HOME>/data/celegans/N2/datasets/DRR008444/DRR008444_1.fastq <HOME>/data/celegans/N2/datasets/DRR008444/DRR008444_2.fastq 80
ABySS creates a "k-" subfolder, e.g. k80, for its output files:
$ mv k80 abyss-out

Create folder for alignment, e.g.:
$ mkdir aln
[$ mkdir aln/w5d50]

Run BWA-mem to align unitigs to reference; output to SAM file. E.g.:
a. For a real sequencing dataset:
$ bwa mem -a -k 80 -w 5 -d 50 -c 10000 ../../../reference/<genome_fa> abyss-out/<unitigs_fa> > aln/w5d50/<ref_aln_sam>
$ cd aln/w5d50/
b. For a simulated dataset:
$ bwa mem -a ../../../reference/<genome_fa> abyss-out/<unitigs_fa> > aln/<ref_aln_sam>
$ cat aln/<ref_aln_sam> | perl -ne 'print if /\t\d+M\t/ && /NM:i:0/' > aln/<perfect_matches_sam>

Edit out header from <ref_aln_sam>, e.g.:
$ cp <ref_aln_sam> <ref_aln_sam_cp>
$ vim <ref_aln_sam_cp>

Parse SAM; write to <ref_aln_counts_csv>
a. For a real sequencing dataset:
$ python <HOME>/scripts/utils/sam-parse.py <ref_aln_sam_cp> <ref_aln_counts_csv> <error_log>
b. For a simulated dataset:
$ python <HOME>/scripts/utils/sam-parse.py aln/<perfect_matches_sam> aln/<ref_aln_counts_csv> aln/<error_log>

Remove error and missing logs if empty, e.g.:
$ rm aln/w5d50/<error_log>
$ rm aln/w5d50/<missing_seqs_log>

[$ cd ../..]

Create folder for estimation results:
$ mkdir results
$ mkdir results/<date>

3. Create folder for specific estimator version results and file describing version details; run estimator, which writes to output files in <output_dir>
$ mkdir results/<output_dir>
$ vim results/<output_dir>/meta.txt
$ python <HOME>/scripts/est.py [--half] abyss-out/<unitigs_fasta> <k> results/<output_dir>

Combine estimation and reference alignment data; output goes to <seq_aln_and_est>, and <aln_est_counts> and <aln_est_ranks> files
$ cd results/<output_dir>/
$ python <HOME>/scripts/results/process/combine-est-bwa-outputs.py [--use_est_len_gps] <est_seq_labels> <est_len_gp_stats> ../../../aln/w5d50/<ref_aln_counts_csv>
Create folders for "full" and summary results; move files accordingly:
$ mkdir full
$ mkdir summary
$ mv <seq_aln_and_est> full
$ mv <est_seq_labels> full
...

4. Compute summary stats; repeat for the various groups (e.g. sequences shorter than 100bps, etc.)
$ cd summary
Note that the following requires the environment variable WGS_COPYNUM_EST_HOME to be set.
The script is not in the repo; I added then decided to remove it for now due to it always being apparently edited even when I hadn't done anything, or some issue like that.
$ <HOME>/scripts/utils/compute-stats-loop.sh

5. Create plots
$ cd ..
$ mkdir plots
$ mkdir plots/observed
[$ mkdir stats_ideal]
$ python <HOME>/scripts/results/general/component-densities_ideal-summary-stats.py full/<seq_aln_and_est> plots/observed <plots_file_prefix> [summary/<est_len_gp_stats>] [stats_ideal <stats_file_prefix>]
[$ mkdir plots/population]
[$ python <HOME>/scripts/results/general/component-densities_ideal-summary-stats.py --copynum_stats_file summary/<copynum_stats_file> full/<seq_aln_and_est> plots/observed <plots_file_prefix> [summary/<est_len_gp_stats>]]
